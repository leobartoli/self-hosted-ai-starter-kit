volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  shared_storage:
  meilisearch_data: # Nuovo volume per MeiliSearch

networks:
  demo:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - OLLAMA_HOST=${OLLAMA_HOST:-ollama:11434}
  env_file:
    - path: .env
      required: true

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama
    - shared_storage:/shared
    - ./images/upload:/shared/images/upload
    - ./images/processed:/shared/images/processed

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
    - shared_storage:/shared
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull mistral-small:24b"

services:
  init-folders:
    image: alpine:latest
    networks: ['demo']
    container_name: init-shared-folders
    volumes:
      - shared_storage:/shared
    entrypoint: /bin/sh
    command:
      - "-c"
      - "mkdir -p /shared/images/upload /shared/images/processed && chmod 777 /shared/images/upload /shared/images/processed && echo 'Cartelle create con successo'"
    restart: "no"

  postgres:
    image: ankane/pgvector
    hostname: postgres
    networks: ['demo']
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "if [ -d /demo-data/credentials ] && [ -d /demo-data/workflows ]; then n8n import:credentials --separate --input=/demo-data/credentials && n8n import:workflow --separate --input=/demo-data/workflows; else echo 'Cartelle demo-data non trovate, saltando import'; fi"
    volumes:
      - ./n8n/demo-data:/demo-data
      - shared_storage:/shared
    depends_on:
      postgres:
        condition: service_healthy
      init-folders:
        condition: service_completed_successfully

  n8n:
    <<: *service-n8n
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/demo-data:/demo-data
      - ./shared:/data/shared
      - shared_storage:/shared
      - ./images/upload:/shared/images/upload
      - ./images/processed:/shared/images/processed
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_started # Aggiunto: n8n dipende da MeiliSearch

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  meilisearch:
    image: getmeili/meilisearch:latest
    hostname: meilisearch
    container_name: meilisearch
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 7700:7700
    volumes:
      - meilisearch_data:/meili_data
    environment:
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu
      - init-folders

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
      - init-folders

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd
      - init-folders